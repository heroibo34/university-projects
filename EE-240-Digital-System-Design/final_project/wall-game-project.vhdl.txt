240 project

library    ieee;
use ieee.std_logic_1164.all;
use ieee.std_logic_arith.all;
use ieee.std_logic_unsigned.all;

library UNISIM;
use UNISIM.vcomponents.all;
entity justcounter is
port(
      Clk      : in std_logic;
      Clear    : in std_logic;                 
      
      pdata: in std_logic_vector(7 downto 0);
		pload: in std_logic;
		upcount: in std_logic;
 downcount: in std_logic;
      
		outhigh: out std_logic_vector (3 downto 0);
		outlow: out	std_logic_vector (3 downto 0)
    );
end justcounter;

architecture structure of justcounter is
-- signal declaration

 
signal upcountlow,Q,z,y       : std_logic_vector(3 downto 0);
signal upcounthigh        : std_logic_vector(3 downto 0);
signal controlH,controlL,Q0,Q1,Q2,Q3,debload,debup,y0,y1,y2,y3,z1,z2,z3,z0,debdown,outclk   : std_logic;
signal temp	: STD_LOGIC := '0';

	signal counter	: integer range 0 to 499999 := 0;
begin
   frequency_divider: process (clear, clk) begin
        if (clear = '1') then
            temp <= '0';
            counter <= 0;
        elsif rising_edge(clk) then
            if (counter = 499999) then
                temp <= NOT(temp);
                counter <= 0;
            else
                counter <= counter + 1;
            end if;
        end if;
    end process;
    
    outclk <= temp;
     
  debouncer : process(outclk)
  begin
 
if rising_edge(outclk) then
            Q(0)<=pload;
  Q(1)<=Q(0);
  Q(2)<=Q(1);
  Q(3)<=Q(2);
  Z(0)<=UPCOUNT;
  Z(1)<=Z(0);
  Z(2)<=Z(1);
  Z(3)<=Z(2);
  Y(0)<=DOWNCOUNT;
  Y(1)<=Y(0);
  Y(2)<=Y(1);
  Y(3)<=Y(2);
 debload <= Q(1) AND Q(2) AND Q(3) AND Q(0);
 debdown <= y(1) AND y(2) AND y(3) AND y(0);
  debup <= z(1) AND z(2) AND z(3) AND z(0);
end if;

end process debouncer;  

 a<= debload or debdown or debup;
forlow: process(a,clear)
begin
if(clear='1')then
		upcountlow <="0000";

            
  elsif(a' event and a='1') then
    if ( debload ='1')then
                   
            upcountlow <= pdata(3 downto 0);
				upcounthigh <= pdata(7 downto 4);
				  
				elsif( debup ='1' )
				then
         if (upcountlow = "1001")then
            upcountlow <= "0000";
				if(upcounthigh < "1001")then
				upcounthigh <= upcounthigh + "0001";
				  elsif (upcounthigh = "1001")then
            upcounthigh <= "0000";
				end if;
         elsif(upcountlow < "1001") then
            upcountlow <= upcountlow + "0001";
			   
         end if;
			elsif( debdown='1'  )
				then
         if (upcountlow = "0000")then
            upcountlow <= "1001";
				if (upcounthigh = "0000")then
            upcounthigh <= "1001";
				

         elsif(upcounthigh >"0000")then
            upcounthigh <= upcounthigh - "0001";
		

         end if;
         elsif(upcountlow > "0000")then
            upcountlow <= upcountlow - "0001";
				
         end if;
      end if;
            end if;
 
    
	  
end process forlow;
  
	 
      
  
outlow<=upcountlow;
outhigh <= upcounthigh;


end structure;











library IEEE;
use IEEE.STD_LOGIC_1164.ALL;

entity BCD_to_seven_segment is
port ( d: in std_logic_vector (3 downto 0);
 s: out std_logic_vector ( 6 downto 0) );
end BCD_to_seven_segment;
architecture dataflow of BCD_to_seven_segment is
begin
with d select
s <="1000000" when "0000",
"1111001" when "0001",
"0100100" when "0010",
"0110000" when "0011",
"0011001" when "0100",
"0010010" when "0101",
"0000010" when "0110",
"1111000" when "0111",
"0000000" when "1000",
"0010000" when "1001",
"1111111" when others;
end dataflow;










library IEEE;
use IEEE.STD_LOGIC_1164.ALL;

entity nexys3_sseg_driver is
    port( 
		MY_CLK 	: in  STD_LOGIC;
		DIGIT0  : in  STD_LOGIC_VECTOR (7 downto 0);
		DIGIT1  : in  STD_LOGIC_VECTOR (7 downto 0);
		DIGIT2  : in  STD_LOGIC_VECTOR (7 downto 0);
		DIGIT3  : in  STD_LOGIC_VECTOR (7 downto 0);
		SSEG_CA : out STD_LOGIC_VECTOR (7 downto 0);
		SSEG_AN : out STD_LOGIC_VECTOR (3 downto 0)
	);
end nexys3_sseg_driver;

architecture Behavioral of nexys3_sseg_driver is

	signal refrclk	: STD_LOGIC := '0';
	signal ch_sel	: integer range 0 to 3 := 0;
	signal counter	: integer range 0 to 124999 := 0;

begin

FREQ_DIV: process (MY_CLK) begin
	if rising_edge(MY_CLK) then
		if (counter = 124999) then 
			refrclk <= not refrclk;
			counter <= 0;
		else
			counter <= counter + 1;
		end if;
	end if;
end process;
    
process(refrclk) begin
	if rising_edge(refrclk) then
		if (ch_sel = 3) then
			ch_sel <= 0;
		else
			ch_sel <= ch_sel + 1;
		end if;
	end if;
end process;
	
with ch_sel select
	SSEG_AN <= 
		"0111" when 0,
		"1011" when 1,
		"1101" when 2,
		"1110" when 3;

with ch_sel select
	SSEG_CA <= 
		DIGIT0 when 0,
		DIGIT1 when 1,
		DIGIT2 when 2,
		DIGIT3 when 3;

end Behavioral;









LIBRARY ieee ;
USE ieee.std_logic_1164.all ;
USE ieee.std_logic_signed.all ;
USE ieee.std_logic_arith.all ;
USE ieee.std_logic_unsigned.all;
entity ee240_bcdcounter is
 port (
 pdata: in std_logic_vector(7 downto 0);
 pload: in std_logic;
 upcount: in std_logic;
 downcount: in std_logic;
 board_clk: in std_logic;
 SSEG_CA: out std_logic_vector(7 downto 0);
 SSEG_AN: out std_logic_vector(3 downto 0));
end;


architecture arch_BCD_counter of ee240_bcdcounter is
component mycounter
port(
      Clk      : in std_logic;
      Clear : in std_logic;                  
      
      pdata: in std_logic_vector(7 downto 0);
		pload: in std_logic;
		upcount: in std_logic;
 downcount: in std_logic;
      
		outhigh: out std_logic_vector (3 downto 0);
		outlow: out	std_logic_vector (3 downto 0)
    );
	 end component;
	 for all : mycounter use entity work.justcounter(structure);
component myseven
			  port
			  ( d: in std_logic_vector (3 downto 0);
            s: out std_logic_vector ( 6 downto 0) );
				end component;
				for all : myseven use entity work.BCD_to_seven_segment(dataflow);
    component nexy			
			port( 
		MY_CLK 	: in  STD_LOGIC;
		DIGIT0  : in  STD_LOGIC_VECTOR (7 downto 0);
		DIGIT1  : in  STD_LOGIC_VECTOR (7 downto 0);
		DIGIT2  : in  STD_LOGIC_VECTOR (7 downto 0);
		DIGIT3  : in  STD_LOGIC_VECTOR (7 downto 0);
		SSEG_CA : out STD_LOGIC_VECTOR (7 downto 0);
		SSEG_AN : out STD_LOGIC_VECTOR (3 downto 0)
	);
	end component;
	for all : nexy use entity work.nexys3_sseg_driver (Behavioral);
           SIGNAL AN,highout,lowout:STD_LOGIC_VECTOR(3 DOWNTO 0);
			   
				SIGNAL dig1,dig0 :STD_LOGIC_VECTOR(6 DOWNTO 0);
				SIGNAL CA,digit1,digit2,digit3,digit0:STD_LOGIC_VECTOR(7 DOWNTO 0);
				
				
begin
-- pdata(7) comes from slide SW-7 (slide Switch)
-- pdata(6) comes from slide SW-6 (slide Switch)
-- pdata(5) comes from slide SW-5 (slide Switch)
-- pdata(4) comes from slide SW-4 (slide Switch)
-- pdata(3) comes from slide SW-3 (slide Switch)
-- pdata(2) comes from slide SW-2 (slide Switch)
-- pdata(1) comes from slide SW-1 (slide Switch)
-- pdata(0) comes from slide SW-0 (slide Switch)
D1 : mycounter port map(board_clk,'0',pdata,pload,upcount,downcount,highout,lowout);
DH : myseven port map(highout,dig1);
DL : myseven port map(lowout,dig0);
digit3 <= "11111111";
digit2 <= "11111111";
digit1(0) <=dig1(0);
digit1(1) <=dig1(1); 
digit1(2) <=dig1(2); 
digit1(3) <=dig1(3); 
digit1(4) <=dig1(4); 
digit1(5) <=dig1(5); 
digit1(6) <=dig1(6); 
digit1(7) <='1'; 
digit0(0) <=dig0(0); 
digit0(1) <=dig0(1); 
digit0(2) <=dig0(2); 
digit0(3) <=dig0(3); 
digit0(4) <=dig0(4); 
digit0(5) <=dig0(5); 
digit0(6) <=dig0(6); 
digit0(7) <= '1';

DFinal : nexy port map (board_clk,digit3,digit2,digit1,digit0,CA,AN);  
SSEG_CA <= CA;
SSEG_AN <= AN; 
 
-- pload comes from BTNL (Push-Button Switch)
-- upcount comes from BTNU (Push-Button Switch)
-- downcount comes from BTND (Push-Button Switch)
-- board_clk comes from the 100 MHz board clock connected to V10
--lowdig(0) is displayed on Digit0 Segment CA
--lowdig(1) is displayed on Digit0 Segment CB
--lowdig(2) is displayed on Digit0 Segment CC
--lowdig(3) is displayed on Digit0 Segment CD
--lowdig(4) is displayed on Digit0 Segment CE
--lowdig(5) is displayed on Digit0 Segment CF
--lowdig(6) is displayed on Digit0 Segment CG
--lowdig(7) is displayed on Digit0 Segment DP, which is always logic 1
--highdig(0) is displayed on Digit1 Segment CA
--highdig(1) is displayed on Digit1 Segment CB
--highdig(2) is displayed on Digit1 Segment CC
--highdig(3) is displayed on Digit1 Segment CD
--highdig(4) is displayed on Digit1 Segment CE
--highdig(5) is displayed on Digit1 Segment CF
--highdig(6) is displayed on Digit1 Segment CG
--highdig(7) is displayed on Digit1 Segment DP, which is always logic 1
-- lowdig(7 downto 0), highdig(7 downto 0) will be input to the design
-- given in the nexys3_sseg_driver.vhd file using structural vhdl style. This design will generate
-- the SSEG_CA(7 downto 0) and SSEG_AN(3 downto 0) outputs using the clock signal.
end arch_BCD_counter;


